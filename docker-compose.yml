# Feito com Muito S2 e Muito Café :)

services:
  # Serviço de banco de dados PostgreSQL
  db:
    container_name: paybank-db
    image: postgres:13
    environment:
      - POSTGRES_USER=dba                 # Usuário do banco de dados
      - POSTGRES_PASSWORD=dba             # Senha do banco de dados
      - POSTGRES_DB=UserDB                # Nome do banco de dados a ser criado
      - POSTGRES_ROOT_PASSWORD=dba        # Senha do superusuário
      - TZ=America/Sao_Paulo              # Fuso horário
    ports:
      - "5432:5432"                       # Mapeamento da porta do banco de dados
    restart: always                       # Reinicia o serviço automaticamente se falhar
    networks:
      - skynet                             # Conecta à rede 'skynet'

  # Serviço do PgAdmin para gerenciamento do PostgreSQL
  pgadmin:
    container_name: paybank-dbadm
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=dba@pgadmin.com    # E-mail padrão para login
      - PGADMIN_DEFAULT_PASSWORD=dba             # Senha padrão para login
      - TZ=America/Sao_Paulo                     # Fuso horário
    ports:
      - "15432:80"                              # Mapeamento da porta do PgAdmin
    depends_on:
      - db                                       # Depende do serviço 'db' (PostgreSQL)
    restart: always
    networks:
      - skynet

  # Serviço Redis para cache e filas
  redis:
    container_name: paybank-redis
    image: redis:6.2
    environment:
      - TZ=America/Sao_Paulo  # Fuso horário
    ports:
      - "6379:6379"           # Mapeamento da porta do Redis
    restart: always
    networks:
      - skynet

  # Serviço RedisInsight para visualização e gerenciamento do Redis
  redis-insight:
    container_name: paybank-redisadm
    image: redislabs/redisinsight:latest
    environment:
      - TZ=America/Sao_Paulo  # Fuso horário
    ports:
      - "5540:5540"           # Mapeamento da porta do RedisInsight
    depends_on:
      - redis                 # Depende do serviço 'redis'
    restart: always
    networks:
      - skynet

  # Serviço da microservice de autenticação
  paybank-ms-auth:
    platform: linux/amd64
    container_name: paybank-ms-auth
    image: papitodev/paybank-ms-auth
    networks:
      - skynet
    depends_on:
      - db                        # Depende do serviço 'db'
    environment:
      - DATABASE_URL=postgresql://dba:dba@paybank-db:5432/UserDB    # URL de conexão com o banco de dados
      - REDIS_HOST=paybank-redis                             # Host do Redis
      - REDIS_PORT=6379                                      # Porta do Redis
      - TZ=America/Sao_Paulo                                 # Fuso horário
    ports:
      - "3333:3333"                                           # Mapeamento da porta do serviço
    restart: unless-stopped

  # Serviço da microservice de e-mail
  paybank-ms-email:
    platform: linux/amd64
    container_name: paybank-ms-email
    image: papitodev/paybank-ms-email
    networks:
      - skynet
    depends_on:
      - paybank-ms-auth         # Depende do serviço 'paybank-ms-auth'
    environment:
      - REDIS_HOST=paybank-redis                             # Host do Redis
      - REDIS_PORT=6379                                      # Porta do Redis
      - MAILTRAP_ACCOUNT_ID=3459129                          # ID da conta do Mailtrap
      - MAILTRAP_TOKEN=c77358a6cb02c8a61f93f991eb269d6b      # Token do Mailtrap
      - MAILTRAP_INBOX_ID=3459129                            # ID da caixa de entrada do Mailtrap
      - TZ=America/Sao_Paulo                                 # Fuso horário
    restart: unless-stopped

  # Serviço do frontend (microfrontend de autenticação)
  paybank-mf-auth:
    platform: linux/amd64
    container_name: paybank-mf-auth
    image: papitodev/paybank-mf-auth
    networks:
      - skynet
    depends_on:
      - paybank-ms-auth         # Depende do serviço 'paybank-ms-auth'
    environment:
      - TZ=America/Sao_Paulo     # Fuso horário
    ports:
      - "3000:3000"              # Mapeamento da porta do frontend
    restart: unless-stopped

  # Serviço de Jenkins para integração contínua
  jenkins:
    build: ./jenkins                # Usa o Dockerfile padrão localizado na pasta ./jenkins
    container_name: jenkins-server  # Define um nome amigável para o contêiner
    privileged: true                # Concede permissões elevadas ao contêiner (necessário para Docker-in-Docker)
    user: root                      # Executa o contêiner como usuário root para garantir permissões
    networks:
      - skynet                      # Conecta o Jenkins à rede Docker chamada 'skynet'
    restart: always                 # Reinicia automaticamente o contêiner em caso de falha
    environment:
      - TZ=America/Sao_Paulo        # Define o fuso horário do contêiner para São Paulo
    ports:
      - "8080:8080"                 # Mapeia a porta 8080 do host para a interface web do Jenkins
      - "50000:50000"               # Mapeia a porta para comunicação com agentes Jenkins
    volumes:
      - jenkins_home:/var/jenkins_home             # Persiste dados do Jenkins no volume 'jenkins_home'
      - /var/run/docker.sock:/var/run/docker.sock  # Permite que o Jenkins use Docker do host

# Volumes
volumes:
  jenkins_home:                 # Persistência de dados do Jenkins

# Redes
networks:
  skynet:
    driver: bridge               # Configuração da rede bridge
